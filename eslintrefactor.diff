diff --git a/.eslintrc.json b/.eslintrc.json
index 3c8a06a..d1b3a3b 100644
--- a/.eslintrc.json
+++ b/.eslintrc.json
@@ -3,33 +3,43 @@
   "parser": "babel-eslint",
   "env": {
     "browser": true,
-    "node": true
+    "node": true,
+    "jest": true
   },
   "rules": {
-    "array-bracket-spacing": [2, "always"],
-    "jsx-quotes": [1, "prefer-single"],
-    "jsx-a11y/no-static-element-interactions": 0,
-    "max-len": [1, { "code": 80, "ignoreComments": true }],
-    "no-use-before-define": [2, "nofunc"],
     "no-shadow": 0,
     "no-console": 0,
-    "prefer-const": 1,
-    "quote-props": [1, "consistent-as-needed"],
     "react/no-multi-comp": 0,
     "react/prop-types": 0,
-    "react/jsx-filename-extension": [1, { "extensions": [".js", ".jsx"] }],
     "react/no-array-index-key": 0,
-    "space-before-function-paren": [2, {"anonymous": "always", "named": "never"}],
+    "jsx-a11y/no-static-element-interactions": 0,
+
+    "prefer-const": 1,
+
+    "quote-props": [1, "consistent-as-needed"],
+    "jsx-quotes": [1, "prefer-single"],
+    "max-len": [1, { "code": 100, "ignoreComments": true }],
+    "react/jsx-filename-extension": [1, { "extensions": [".js", ".jsx"] }],
     "brace-style": [1, "stroustrup", { "allowSingleLine": true }],
-    "comma-dangle": ["error", "never"],
+    "no-mixed-operators":[1, {"allowSamePrecedence": true}],
+
+    "array-bracket-spacing": [2, "always"],
+    "no-use-before-define": [2, "nofunc"],
+    "comma-dangle": [2, "never"],
+    "space-before-function-paren": [2, {"anonymous": "always", "named": "never"}],
+    
     "react/sort-comp": 0,
     "no-underscore-dangle": 0,
     "arrow-body-style": 0,
+    "react/prefer-stateless-function": 0,
+    "jsx-a11y/no-noninteractive-tabindex": 0,
+    "jsx-a11y/click-events-have-key-events": 0,
 
     "react/jsx-no-bind": 1,
     "jsx-a11y/no-noninteractive-tabindex": 1,
     "camelcase": 1,
-    "no-mixed-operators": 1
-
+    "import/prefer-default-export": 1,
+    "no-nested-ternary": 1,
+    "no-param-reassign": 1
   }
 }
diff --git a/client/src/Cache.js b/client/src/Cache.js
index 1a8fb8e..293e8a1 100644
--- a/client/src/Cache.js
+++ b/client/src/Cache.js
@@ -1,34 +1,33 @@
 
-
+// Quick and dirty cache.
+// TODO replace or improve
 class Cache {
   constructor() {
     this._cache = {};
   }
 
   // Kind of hacky method to get a key for the cache
-  static key() {
-    let key = arguments.length === 1
-      ? arguments[0].join('_')
-      : [...arguments].join('_');
+  static key(...args) {
+    const key = args.length === 1
+      ? args[0].join('_')
+      : args.join('_');
     return key;
   }
 
-  has() {
-    let key = Cache.key([...arguments]);
+  has(...args) {
+    const key = Cache.key(args);
     return this._cache[key] !== undefined;
   }
 
-  get() {
-    let key = Cache.key([...arguments]);
+  get(...args) {
+    const key = Cache.key(args);
     return this._cache[key];
   }
 
-  put() {
-    let args = [...arguments];
-    let value = args[0];
-    args = args.slice(1);
-    let key = Cache.key(args);
-    this._cache[key] = value;
+  put(...args) {
+    const value = args[0];
+    const allButFirstArgs = args.slice(1);
+    this._cache[Cache.key(allButFirstArgs)] = value;
     // console.log('put', key, value);
   }
 
@@ -37,4 +36,4 @@ class Cache {
   }
 }
 
-export { Cache };
\ No newline at end of file
+export default Cache;
diff --git a/client/src/Client.js b/client/src/Client.js
index dce3a8d..0abf619 100644
--- a/client/src/Client.js
+++ b/client/src/Client.js
@@ -1,7 +1,7 @@
 /* eslint-disable no-undef */
 function search(query, cb) {
   return fetch(`api/?q=${query}`, {
-    accept: "application/json"
+    accept: 'application/json'
   })
     .then(checkStatus)
     .then(parseJSON)
@@ -16,15 +16,15 @@ function search(query, cb) {
 function save(text, cb) {
   fetch('/save', {
     method: 'POST', // or 'PUT'
-    body: text, 
+    body: text,
     headers: new Headers({
       'Content-Type': 'text/plain'
     })
   })
-  .then(checkStatus)
-  .then((res) => res.text())
-  .then(cb)
-  .catch(error => console.error('Error:', error));
+    .then(checkStatus)
+    .then(res => res.text())
+    .then(cb)
+    .catch(error => console.error('Error:', error));
 }
 
 function checkStatus(response) {
@@ -43,4 +43,4 @@ function parseJSON(response) {
 }
 
 const Client = { search, save };
-export default Client;
\ No newline at end of file
+export default Client;
diff --git a/client/src/Dish.js b/client/src/Dish.js
index eb22b9b..52b4193 100644
--- a/client/src/Dish.js
+++ b/client/src/Dish.js
@@ -1,4 +1,4 @@
-import { Price } from './Price.js'
+import { Price } from './NumTypes';
 
 class Dish {
   constructor(name = '', priceObjOrNum = 0) {
@@ -7,12 +7,12 @@ class Dish {
       this.price = priceObjOrNum;
     }
     else if (typeof priceObjOrNum === 'number') {
-      this.price = new Price(priceObjOrNum)
+      this.price = new Price(priceObjOrNum);
     }
     else {
-      throw new Error(`Dish: was expecting price obj or number, got ${priceObjOrNum}`)
+      throw new Error(`Dish: was expecting price obj or number, got ${priceObjOrNum}`);
     }
   }
 }
 
-export { Dish };
\ No newline at end of file
+export default Dish;
diff --git a/client/src/NumTypes.js b/client/src/NumTypes.js
index b885a87..a51da11 100644
--- a/client/src/NumTypes.js
+++ b/client/src/NumTypes.js
@@ -1,3 +1,5 @@
+/* eslint-disable constructor-super */
+
 import PropTypes from 'prop-types';
 
 /*
@@ -23,18 +25,18 @@ class NumStringPair {
 }
 
 class Percent extends NumStringPair {
-  constructor(num, stringRep) {
+  constructor(...args) {
     if (arguments.length === 1) {
-      const arg = arguments[0];
+      const arg = args[0];
 
       // used by StateLoader
       if (typeof arg === 'number') {
         // show 1 decimal point but only if necessary
-        if (arg === Number(num.toFixed(0))) {
-          super(arg, num.toFixed(0));
+        if (arg === Number(arg.toFixed(0))) {
+          super(arg, arg.toFixed(0));
         }
         else {
-          super(arg, num.toFixed(1));
+          super(arg, arg.toFixed(1));
         }
       }
       // used by StateLoader
@@ -43,8 +45,8 @@ class Percent extends NumStringPair {
       }
     }
     // internal only
-    else if (arguments.length === 2) {
-      super(arguments[0], arguments[1]);
+    else if (args.length === 2) {
+      super(args[0], args[1]);
     }
     else {
       throw new Error('Need to supply 1 or 2 arguments');
@@ -65,13 +67,13 @@ class Percent extends NumStringPair {
 }
 
 class Price extends NumStringPair {
-  constructor(num, stringRep) {
-    if (arguments.length === 1) {
-      const arg = arguments[0];
+  constructor(...args) {
+    if (args.length === 1) {
+      const arg = args[0];
 
       // used by StateLoader and Dish
       if (typeof arg === 'number') {
-        super(arg, num.toFixed(2));
+        super(arg, arg.toFixed(2));
       }
       // used by StateLoader
       else if (typeof arg === 'object') {
@@ -79,8 +81,8 @@ class Price extends NumStringPair {
       }
     }
     // internal only
-    else if (arguments.length === 2) {
-      super(arguments[0], arguments[1]);
+    else if (args.length === 2) {
+      super(args[0], args[1]);
     }
     else {
       throw new Error('Need to supply 1 or 2 arguments');
diff --git a/client/src/StateLoader.js b/client/src/StateLoader.js
index 18abbb0..a040175 100644
--- a/client/src/StateLoader.js
+++ b/client/src/StateLoader.js
@@ -1,5 +1,5 @@
-import { Price, Percent } from './Price';
-import { Dish } from './Dish';
+import { Price, Percent } from './NumTypes';
+import Dish from './Dish';
 
 const lsSplitterKey = 'SplitterState';
 
@@ -84,4 +84,4 @@ function customParser(key, val) {
   return val;
 }
 
-export { StateLoader };
+export default StateLoader;
diff --git a/client/src/Utils.js b/client/src/Utils.js
index 76f9b57..79c62d7 100644
--- a/client/src/Utils.js
+++ b/client/src/Utils.js
@@ -3,12 +3,13 @@ class Utils {
   // display num as  '$num.##' or '$ num.##' (nbsp after $)
   // add commas using regex, via https://stackoverflow.com/a/14428340/1188090
   static priceAsString(num, space = true) {
-    return '$' + (space ? '\u00A0' : '') + num.toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, '$1,'); 
+    const formattedNum = num.toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, '$1,');
+    return `$${space ? '\u00A0' : ''}${formattedNum}`;
   }
 
   // Return a shallow clone of the given 2d array
   static clone2D(a) {
-    return a.map(o => [...o]);
+    return a.map(o => [ ...o ]);
   }
 
   static sumFunc(p, c) {
@@ -17,7 +18,7 @@ class Utils {
 
   // hat tip to https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round
   static precisionRound(number, precision) {
-    var factor = Math.pow(10, precision);
+    const factor = 10 ** precision;
     return Math.round(number * factor) / factor;
   }
 
@@ -26,4 +27,4 @@ class Utils {
   }
 }
 
-export { Utils };
\ No newline at end of file
+export default Utils;
diff --git a/client/src/components/App.js b/client/src/components/App.js
index 5585918..4cdc856 100644
--- a/client/src/components/App.js
+++ b/client/src/components/App.js
@@ -1,8 +1,8 @@
-import React from 'react'
+import React from 'react';
 
-import Splitter from './Splitter.js'
+import '../css/App.css';
 
-import '../css/App.css'
+import Splitter from './Splitter';
 
 class App extends React.Component {
   handleWindowSizeChange = () => {
@@ -12,7 +12,7 @@ class App extends React.Component {
   constructor() {
     super();
     this.state = {
-      width: window.innerWidth,
+      width: window.innerWidth
     };
   }
 
@@ -27,24 +27,30 @@ class App extends React.Component {
   }
 
   render() {
-    let useMobileUI = this.state.width < 500;
-    let tapOrClick = useMobileUI ? 'Tap' : 'Click';
+    const useMobileUI = this.state.width < 500;
+    const tapOrClick = useMobileUI ? 'Tap' : 'Click';
+    const howToUseText = `Add people/dishes as appropriate. 
+      ${tapOrClick} to rename them, and to set prices, tax and tip 
+      percent (mandatory). ${tapOrClick} the grey/green cells to add/remove 
+      the dish from someone's order.`;
+    const gitURL = 'https://github.com/mritterhoff/splitmycheck#table-of-contents';
+
     return (
-      <div className="App">
-        <header className="App-header">
-          <h1 className="App-title">
+      <div className='App'>
+        <header className='App-header'>
+          <h1 className='App-title'>
             <a href='https://www.splitmycheck.com'>Split My Check</a>
           </h1>
         </header>
-        <p className="App-intro">
-          <b>How to use</b>: Add people/dishes as appropriate. {tapOrClick} to rename them, and to set prices, tax and tip percent (mandatory). {tapOrClick} the grey/green cells to add/remove the dish from someone's order.
-          <br/><b>Coming soon</b>: Overflow ellipses, History/Undo.<br/>
+        <p className='App-intro'>
+          <b>How to use</b>: {howToUseText}
+          <br /><b>Coming soon</b>: Overflow ellipses, History/Undo.<br />
         </p>
-        <Splitter useMobileUI={useMobileUI}/>
-        <div className='footer'> | <a href="https://github.com/mritterhoff/splitmycheck#table-of-contents">source</a> | </div>
+        <Splitter useMobileUI={useMobileUI} />
+        <div className='footer'> | <a href={gitURL}>source</a> | </div>
       </div>
     );
   }
 }
 
-export default App;
\ No newline at end of file
+export default App;
diff --git a/client/src/components/ButtonBar.js b/client/src/components/ButtonBar.js
index 39fc4d9..c773297 100644
--- a/client/src/components/ButtonBar.js
+++ b/client/src/components/ButtonBar.js
@@ -1,9 +1,9 @@
 import React from 'react';
 import PropTypes from 'prop-types';
 
-import '../css/ButtonBar.css'
+import '../css/ButtonBar.css';
 
-class ButtonBar extends React.Component { 
+class ButtonBar extends React.Component {
   render() {
     return (
       <div className='buttonBar'>
@@ -11,10 +11,10 @@ class ButtonBar extends React.Component {
           <button onClick={() => this.props.removeDishFunc()}>-</button>
           <span>Dish</span>
           <button onClick={() => this.props.addDishFunc()}>+</button>
-        </div>       
+        </div>
         <div className='buttonGroup multi'>
           <button onClick={() => this.props.removePersonFunc()}>-</button>
-            <span>Person</span>
+          <span>Person</span>
           <button onClick={() => this.props.addPersonFunc()}>+</button>
         </div>
         <div className='buttonGroup single'>
@@ -27,7 +27,7 @@ class ButtonBar extends React.Component {
             <span>Example</span>
           </button>
         </div>
-      </div>  
+      </div>
     );
   }
 }
@@ -41,6 +41,6 @@ ButtonBar.propTypes = {
 
   resetFunc: PropTypes.func.isRequired,
   showExampleFunc: PropTypes.func.isRequired
-}
+};
 
-export {ButtonBar};
\ No newline at end of file
+export default ButtonBar;
diff --git a/client/src/components/CellToggle.js b/client/src/components/CellToggle.js
index b9d9844..6992b34 100644
--- a/client/src/components/CellToggle.js
+++ b/client/src/components/CellToggle.js
@@ -1,27 +1,28 @@
-import React from 'react'
+import React from 'react';
 import PropTypes from 'prop-types';
 import ClassNames from 'classnames';
 
-import '../css/CellToggle.css'
+import '../css/CellToggle.css';
 
 /*
   This component displays a price and switches state between on and off
   when clicked. It can also be given an error. Its color is dependent on
-  on/off/error status. 
+  on/off/error status.
 */
 class CellToggle extends React.Component {
   render() {
     const classNames = ClassNames({
-      'CellToggle': true,
-      'on': this.props.on,
-      'off': !this.props.on,
-      'error': this.props.hasError
+      CellToggle: true,
+      on: this.props.on,
+      off: !this.props.on,
+      error: this.props.hasError
     });
 
     return (
-      <div 
-        className={classNames} 
-        onClick={() => {this.props.onClickCB(!this.props.on)}}>
+      <div
+        className={classNames}
+        onClick={() => { this.props.onClickCB(!this.props.on); }}
+      >
         <span>{this.props.price}</span>
       </div>
     );
@@ -29,10 +30,10 @@ class CellToggle extends React.Component {
 }
 
 CellToggle.propTypes = {
-  on:         PropTypes.bool.isRequired,
-  hasError:   PropTypes.bool.isRequired,
-  onClickCB:  PropTypes.func.isRequired,
-  price:      PropTypes.string.isRequired
-}
+  on: PropTypes.bool.isRequired,
+  hasError: PropTypes.bool.isRequired,
+  onClickCB: PropTypes.func.isRequired,
+  price: PropTypes.string.isRequired
+};
 
-export {CellToggle};
\ No newline at end of file
+export default CellToggle;
diff --git a/client/src/components/Inputs.js b/client/src/components/Inputs.js
index 1151030..af70e90 100644
--- a/client/src/components/Inputs.js
+++ b/client/src/components/Inputs.js
@@ -1,23 +1,19 @@
-import React from 'react'
-import PropTypes from 'prop-types'
-import AutosizeInput from 'react-input-autosize'
+/* eslint-disable no-unused-expressions */
 
-import { Price } from '../Price'
+import React from 'react';
+import PropTypes from 'prop-types';
+import AutosizeInput from 'react-input-autosize';
 
-import '../css/Inputs.css'
+import { Price } from '../NumTypes';
 
-// TODO the style resolution for these inputs should be improved.
+import '../css/Inputs.css';
 
-let inputStyleDefault = { 
+// TODO the style resolution for these inputs should be improved.
+const inputStyleDefault = {
   border: '1px solid #999',
-  borderRadius: 3, 
+  borderRadius: 3,
   paddingTop: '.2em',
-  paddingBottom: '.2em',
-};
-
-let divContainerStyle = {
-  borderRadius: 5, 
-  padding: '.1em'
+  paddingBottom: '.2em'
 };
 
 /*
@@ -34,62 +30,70 @@ class StringInput extends React.Component {
 
   autoSizeInputRef;
 
-  updateInputValue = event => {
+  stringMaxChars = 7;
+
+  updateInputValue = (event) => {
     // must prevent passing null value, so pass empty string instead
     this.props.onChangeCB(event.target.value || '');
   };
 
-  onFocus = event => {
+  onFocus = () => {
     // don't show the placeholder when user is inputting numbers
     this.autoSizeInputRef.input.placeholder = '';
-    this.setState((prevState) => ({ focused: true }));
+    this.setState(() => ({ focused: true }));
   };
 
-  onBlur = event => {
+  onBlur = () => {
     this.autoSizeInputRef.input.placeholder = this.props.placeholder;
-    this.setState((prevState) => ({ focused: false }));
+    this.setState(() => ({ focused: false }));
   };
 
   selectInput() {
     this.autoSizeInputRef.input.select();
   }
 
+  // if the valye is short enough, display it, otherwise truncate and add an elipsis
+  getInputValueToDisplay = () => {
+    if (this.state.focused || this.props.value.length <= this.stringMaxChars) {
+      return this.props.value;
+    }
+    return `${this.props.value.substring(0, this.stringMaxChars)}...`;
+  }
+
   render() {
-    let divStyle = Object.assign({}, divContainerStyle, this.props.style);
-    let inputStyle = Object.assign({}, inputStyleDefault, this.props.style,
-      {padding: '.2em', maxWidth: '6em'});
-
-    let valueToShow = this.state.focused
-      ? this.props.value
-      : this.props.value.length <= 7
-        ? this.props.value
-        : this.props.value.substring(0, 7) + '...';
+    const inputStyle = Object.assign(
+      { textAlign: (this.props.center ? 'center' : 'auto') },
+      inputStyleDefault,
+      { padding: '.2em', maxWidth: '6em' }
+    );
+
     return (
       <AutosizeInput
-        value={valueToShow}
+        className='InputContainer'
+        value={this.getInputValueToDisplay()}
         placeholder={this.props.placeholder}
         placeholderIsMinWidth
-        style={divStyle}
         inputStyle={inputStyle}
         onKeyDown={getKeydownCB(() => (this.autoSizeInputRef))}
         onChange={this.updateInputValue}
         onBlur={this.onBlur}
         onFocus={this.onFocus}
-        ref={(ref) => { this.autoSizeInputRef = ref; }}/>
+        ref={(ref) => { this.autoSizeInputRef = ref; }}
+      />
     );
   }
 }
 
 StringInput.propTypes = {
-  style:        PropTypes.object,
-  onChangeCB:   PropTypes.func.isRequired,
-  value:        PropTypes.string.isRequired,
-  placeholder:  PropTypes.string.isRequired
-}
-
-
-
+  center: PropTypes.bool,
+  onChangeCB: PropTypes.func.isRequired,
+  value: PropTypes.string.isRequired,
+  placeholder: PropTypes.string.isRequired
+};
 
+StringInput.defaultProps = {
+  center: false
+};
 
 
 class PriceInput extends React.Component {
@@ -103,12 +107,12 @@ class PriceInput extends React.Component {
     };
   }
 
-  onChange(event) {
+  onChange = (event) => {
     this.props.onChangeCB(event.target.value, false);
   }
 
-  onFocus(event) {
-    this.setState((prevState) => ({ focused: true }));
+  onFocus = () => {
+    this.setState(() => ({ focused: true }));
 
     // don't show the placeholder when user is inputting numbers
     this.autoSizeInputRef.input.placeholder = '';
@@ -118,9 +122,9 @@ class PriceInput extends React.Component {
     this.autoSizeInputRef.input.select();
   }
 
-  onBlur(event) {
+  onBlur = (event) => {
     // only ever send back a string, even if it's an empty string
-    let newValue = event.target.value || '';
+    const newValue = event.target.value || '';
 
     // only trigger a price change if the newValue is actually different
     // console.log(newValue, Number(newValue), this.props.priceObj);
@@ -128,19 +132,17 @@ class PriceInput extends React.Component {
       this.props.onChangeCB(newValue, true);
     }
 
-    this.setState((prevState) => ({
-      focused: false
-    }));
+    this.setState(() => ({ focused: false }));
 
     this.autoSizeInputRef.input.placeholder = this.defaultPlaceholder;
   }
 
   render() {
-    let divStyle = Object.assign({}, divContainerStyle, this.props.style);
-    
     // if the price input is empty and the input isn't focused, show a pink background
-    let inputStyle = Object.assign({}, inputStyleDefault, 
-      {maxWidth: '4em', textAlign: 'right', paddingRight: '.2em',})
+    const inputStyle = Object.assign(
+      {}, inputStyleDefault,
+      { maxWidth: '4em', textAlign: 'right', paddingRight: '.2em' }
+    );
     if (Number(this.props.priceObj.num) === 0 && !this.state.focused) {
       inputStyle.backgroundColor = 'lightgrey';
     }
@@ -152,16 +154,17 @@ class PriceInput extends React.Component {
 
     return (
       <AutosizeInput
+        className='InputContainer'
         value={valueToShow}
-        type="number"
-        min = "0" step=".01"
+        type='number'
+        min='0'
+        step='.01'
         placeholder={this.defaultPlaceholder}
         placeholderIsMinWidth
-        style={divStyle}
         inputStyle={inputStyle}
-        onChange={this.onChange.bind(this)}
-        onBlur={this.onBlur.bind(this)}
-        onFocus={this.onFocus.bind(this)}
+        onChange={this.onChange}
+        onBlur={this.onBlur}
+        onFocus={this.onFocus}
         onKeyDown={getKeydownCB(() => (this.autoSizeInputRef))}
         extraWidth={1}
         ref={(inputRef) => { this.autoSizeInputRef = inputRef; }}
@@ -171,11 +174,9 @@ class PriceInput extends React.Component {
 }
 
 PriceInput.propTypes = {
-  onChangeCB:   PropTypes.func.isRequired,
-  priceObj:     Price.shape.isRequired
-}
-
-
+  onChangeCB: PropTypes.func.isRequired,
+  priceObj: Price.shape.isRequired
+};
 
 
 class PercentInput extends React.Component {
@@ -188,38 +189,36 @@ class PercentInput extends React.Component {
     };
   }
 
-  onChange(event) {
+  onChange = (event) => {
     this.props.onChangeCB(event.target.value, false);
   }
 
-  onFocus(event) {
-    this.setState((prevState) => ({ focused: true }));
+  onFocus = () => {
+    this.setState(() => ({ focused: true }));
   }
 
   selectInput() {
     this.autoSizeInputRef.input.select();
   }
 
-  onBlur(event) {
+  onBlur = (event) => {
     // only ever send back a string, even if it's an empty string
-    let newValue = event.target.value || '';
+    const newValue = event.target.value || '';
 
     // only trigger a price change if the newValue is actually different
     if (Number(newValue) !== this.props.numObj.num) {
       this.props.onChangeCB(newValue, true);
     }
 
-    this.setState((prevState) => ({
-      focused: false
-    }));
+    this.setState(() => ({ focused: false }));
   }
 
   render() {
-    let divStyle = Object.assign({}, divContainerStyle, this.props.style);
-    
     // if the price input is empty and the input isn't focused, show a pink background
-    let inputStyle = Object.assign({}, inputStyleDefault, 
-      {maxWidth: '4em', textAlign: 'right', paddingRight: '.2em',})
+    const inputStyle = Object.assign(
+      {}, inputStyleDefault,
+      { maxWidth: '4em', textAlign: 'right', paddingRight: '.2em' }
+    );
     if (Number(this.props.numObj.num) === 0 && !this.state.focused) {
       inputStyle.backgroundColor = 'lightgrey';
     }
@@ -231,16 +230,17 @@ class PercentInput extends React.Component {
 
     return (
       <AutosizeInput
+        className='InputContainer'
         value={valueToShow}
-        type="number"
-        min = "0" step="1"
+        type='number'
+        min='0'
+        step='1'
         placeholder='10'
         placeholderIsMinWidth
-        style={divStyle}
         inputStyle={inputStyle}
-        onChange={this.onChange.bind(this)}
-        onBlur={this.onBlur.bind(this)}
-        onFocus={this.onFocus.bind(this)}
+        onChange={this.onChange}
+        onBlur={this.onBlur}
+        onFocus={this.onFocus}
         onKeyDown={getKeydownCB(() => (this.autoSizeInputRef))}
         extraWidth={1}
         ref={(inputRef) => { this.autoSizeInputRef = inputRef; }}
@@ -255,9 +255,6 @@ class PercentInput extends React.Component {
 // }
 
 
-
-
-
 // fix for silly % not handling negative well
 function mod(n, m) {
   return ((n % m) + m) % m;
@@ -268,27 +265,31 @@ function mod(n, m) {
 // easy sharing between components (no 'this' referencing)
 function getKeydownCB(inputRefGetter) {
   return (ev) => {
-    if (ev.keyCode === 13) {  // Enter key (works on mobile too!)
-      const inputRef = inputRefGetter();  
+    if (ev.keyCode === 13) { // Enter key (works on mobile too!)
+      const inputRef = inputRefGetter();
+
       if (inputRef) {
         inputRef.blur();
+
         // get as array rather than NodeList
-        let tabableElements = [...document.querySelectorAll('input, [tabIndex="0"]')];
-        let curIndex = tabableElements.indexOf(inputRef.input)
+        const tabableEls =
+          [ ...document.querySelectorAll('input, [tabIndex="0"]') ];
+        const curIndex = tabableEls.indexOf(inputRef.input);
         if (curIndex === -1) {
           console.warn(`Couldn't find current input. ${inputRef.input.innerHTML}`);
           return;
         }
 
         // shift/enter moves backwards in the list!!! wrap to the beginning
-        let newIndex = mod(curIndex + (ev.shiftKey ? -1 : 1), tabableElements.length);
-        let v = tabableElements[newIndex];
-        
-        // if it is an input, we select it, if it's a RowHeader, focus on it
-        v.select ? v.select() : v.focus();
+        const newIndex = mod(curIndex + (ev.shiftKey ? -1 : 1), tabableEls.length);
+        const tabbedEl = tabableEls[newIndex];
+
+        // if it has a select function, call it, otherwise call focus
+        // because it could be an input, or a div that's going to become an input
+        tabbedEl.select ? tabbedEl.select() : tabbedEl.focus();
       }
     }
   };
 }
 
-export {StringInput, PriceInput, PercentInput};
\ No newline at end of file
+export { StringInput, PriceInput, PercentInput };
diff --git a/client/src/components/Linker.js b/client/src/components/Linker.js
index c519e6d..fc08fb1 100644
--- a/client/src/components/Linker.js
+++ b/client/src/components/Linker.js
@@ -2,14 +2,14 @@ import React from 'react';
 
 import Client from '../Client';
 
-import '../css/Linker.css'
+import '../css/Linker.css';
 
 const STATUS = {
   NONE: 'none',
   REQUESTING: 'requesting',
   ERROR: 'error',
   COMPLETE: 'complete'
-}
+};
 
 class Linker extends React.Component {
   // holds request timeout id
@@ -18,68 +18,72 @@ class Linker extends React.Component {
   constructor(props) {
     super(props);
     this.state = {
-      result: '',
-      lastSentDataString: '',
+      link: '',
+      lastSentData: '',
       requestStatus: STATUS.NONE
     };
   }
 
-  onClick() {
+  onClick = () => {
     // update the ui to show a request is in progress
-    this.setState((prevState) => ({
+    this.setState(() => ({
       requestStatus: STATUS.REQUESTING
     }));
 
     // set a timeout to display "error" if we don't hear back soon
     this._timeoutID = setTimeout(() => {
-      this.setState((prevState) => ({
+      this.setState(() => ({
         requestStatus: STATUS.ERROR
       }));
     }, 2000);
 
-    let dataString = JSON.stringify(this.props.dataToSend);
-
+    const dataString = JSON.stringify(this.props.dataToSend);
     Client.save(dataString, (response, error) => {
       // we heard back, so cancel the timeout
       clearTimeout(this._timeoutID);
-      this.setState((prevState) => ({
+      this.setState(() => ({
         link: response || error,
-        lastSentDataString: dataString,
+        lastSentData: dataString,
         requestStatus: STATUS.COMPLETE
       }));
     });
-  }
+  };
 
   getLinkOrStatus() {
     const userTextMap = {
       [STATUS.REQUESTING]: ' ...requesting',
       [STATUS.ERROR]: ' error getting link',
       [STATUS.NONE]: ''
-    }
+    };
 
     if (this.state.requestStatus !== STATUS.COMPLETE) {
       return <span>{userTextMap[this.state.requestStatus]}</span>;
     }
 
-    // keep us on https if we're not running locally
-    let hrefPrefix = this.state.link.match(/localhost/) ? 'http://' : 'https://';
     return (
-      <a target='_blank' 
-        style={{'marginLeft': '.5em'}} 
-        href={hrefPrefix + this.state.link}>
-          {this.state.link}
+      <a
+        target='_blank'
+        style={{ marginLeft: '.5em' }}
+        href={this.hrefPrefix() + this.state.link}
+      >
+        {this.state.link}
       </a>
     );
   }
 
+  // keep us on https if we're not running locally
+  hrefPrefix = () => (
+    this.state.link.match(/localhost/) ? 'http://' : 'https://'
+  )
+
   render() {
     // disable the button if we're requesting the url, or we haven't got new data to send
-    let disableButton = (this.state.requestStatus === STATUS.REQUESTING)
-      || (this.state.lastSentDataString === JSON.stringify(this.props.dataToSend));
+    const disableButton = (this.state.requestStatus === STATUS.REQUESTING)
+      || (this.state.lastSentData === JSON.stringify(this.props.dataToSend));
 
     return (
-      <div className='Linker' style={{ margin: '.2em'}}>
-        <button onClick={this.onClick.bind(this)} disabled={disableButton}>
+      <div className='Linker' style={{ margin: '.2em' }}>
+        <button onClick={this.onClick} disabled={disableButton}>
           Get split link
         </button>
         {this.getLinkOrStatus()}
@@ -88,4 +92,4 @@ class Linker extends React.Component {
   }
 }
 
-export { Linker };
\ No newline at end of file
+export default Linker;
diff --git a/client/src/components/RowHeader2.js b/client/src/components/RowHeader2.js
index 98c9b7a..dc8c221 100644
--- a/client/src/components/RowHeader2.js
+++ b/client/src/components/RowHeader2.js
@@ -2,7 +2,7 @@ import React from 'react';
 import ClassNames from 'classnames';
 import PropTypes from 'prop-types';
 
-import { Swappable } from './Swappable';
+import Swappable from './Swappable';
 
 import '../css/RowHeader.css';
 
@@ -25,16 +25,11 @@ class RowHeader2 extends React.Component {
     };
   }
 
-  // Get the first defined ref index
-  getFirstRefIndex() {
-    return this._refs[0] ? 0 : 1;
-  }
-
-  onClickCB() {
+  onClickCB = () => {
     // if we're not already focused, and we click somewhere other than
     // the two spans (ie the background container div), focus on the first input
     if (!this.state.isManagingFocus) {
-      this.swapCB(this.getFirstRefIndex(), true);
+      this.swapCB(this._refs[0] ? 0 : 1, true);
     }
   }
 
@@ -76,9 +71,20 @@ class RowHeader2 extends React.Component {
       notFocused: !this.state.isManagingFocus
     });
 
+    // TODO explore making this use something other than onClick
+    return (
+      <div className={className} onClick={this.onClickCB}>
+        <div>
+          {this.getChildren()}
+        </div>
+      </div>
+    );
+  }
+
+  getChildren() {
     // If it's a Swappable, add some props to it
     // TODO why React.Children.map?
-    const clonedChildren = React.Children.map(
+    return React.Children.map(
       this.props.children,
       (child, i) => {
         if (child.type.name === Swappable.name) {
@@ -87,7 +93,7 @@ class RowHeader2 extends React.Component {
             {
               ref: (ref) => { this._refs[i] = ref; },
               swapCB: this.swapCB.bind(this),
-              interactive: this.state.isManagingFocus,
+              interactive: !this.props.useMobileUI || this.state.isManagingFocus,
               index: i,
               key: i
             }
@@ -96,15 +102,6 @@ class RowHeader2 extends React.Component {
         return child;
       }
     );
-
-    // // TODO explore making this use something other than onClick
-    return (
-      <div className={className} onClick={this.onClickCB.bind(this)}>
-        <div>
-          {clonedChildren}
-        </div>
-      </div>
-    );
   }
 }
 
@@ -113,4 +110,4 @@ RowHeader2.propTypes = {
   useMobileUI: PropTypes.bool.isRequired
 };
 
-export { RowHeader2 };
+export default RowHeader2;
diff --git a/client/src/components/RowHeaderOld.js b/client/src/components/RowHeaderOld.js
deleted file mode 100644
index f835183..0000000
--- a/client/src/components/RowHeaderOld.js
+++ /dev/null
@@ -1,111 +0,0 @@
-import React from 'react';
-import PropTypes from 'prop-types'
-
-import '../css/RowHeader.css'
-
-// Create the first element of a row. Handle bluring/focusing on subelements,
-// render 'staticReplacement' when unfocussed on mobile. 
-// Focus massively improved by https://medium.com/@jessebeach/dealing-with-focus-and-blur-in-a-composite-widget-in-react-90d3c3b49a9b
-class RowHeader extends React.Component {
-  // holds blur timeout id
-  _timeoutID;
-
-  // array of refs to all of the children components so we can trigger focus/selection
-  // on the first one when this component receives focus
-  _refs = [];
-
-  constructor(props) {
-    super(props);
-    this.state = {
-      // if one of this element's children is focused
-      isManagingFocus: false
-    };
-  }
-
-  componentDidUpdate(prevProps, prevState) {
-    // only select the first input if we're newly focussed
-    if (this.state.isManagingFocus && !prevState.isManagingFocus) {
-      // select the input of the first ref that has that function
-      // this exists to accomidate tax/tip, who's first ref is a span element
-      this._refs.filter(el => el.selectInput)[0].selectInput();
-    }
-  }
-
-  // _onBlur() {
-  //   // return;  // uncomment this to help with style analysis in chrome
-  //   this._timeoutID = setTimeout(() => {
-  //     if (this.state.isManagingFocus) {
-  //       this.setState(prevState => ({
-  //         isManagingFocus: false
-  //       }));
-  //     }
-  //   }, 0);
-  // }
-  
-  // _onFocus() {
-  //   clearTimeout(this._timeoutID);
-  //   if (!this.state.isManagingFocus) {
-  //     this.setState(prevState => ({
-  //       isManagingFocus: true
-  //     }));
-  //   }
-  // }
-
-  render() {
-    // TODO neaten this up
-    // vertically align child span element when appropriate
-    // https://css-tricks.com/centering-css-complete-guide/
-    let className='RowHeader';
-    if (this.props.useMobileUI && !this.state.isManagingFocus) {
-      className += ' flexVertCenter'
-    }
-    else {
-      className += ' block';
-    }
-
-    // SO PROUD OF THIS
-    // makes it so that if this element is managing focus, it can't be selected!!
-    let tabIndex = this.state.isManagingFocus ? '-1' : '0';
-
-    // wrap in an additional div to increase touchable/clickable surface
-    return (
-      <div className='RowHeaderContainer' 
-        tabIndex={tabIndex}
-        // onBlur={this._onBlur.bind(this)}
-        // onFocus={this._onFocus.bind(this)}
-        >
-        <div className={className}>
-          {this.getInnerDisplay()}
-        </div>
-      </div>
-    );
-  }
-
-  // get refs to each child component
-  // hat tip to https://stackoverflow.com/a/32371612/1188090
-  // must set _ref by index (push() will lead to an array of old duplicates)
-  getInnerDisplay() {
-    if (this.state.isManagingFocus || !this.props.useMobileUI) {
-      return React.Children.map(
-        this.props.children, 
-        (child, i) => React.cloneElement(
-          child, 
-          { 
-            ref: (ref) => { this._refs[i] = ref; },
-            tabIndex: 0
-          }
-        ));
-    }
-
-    // if we're using mobile and we're not focused
-    return this.props.staticReplacement();
-  }
-}
-
-RowHeader.propTypes = {
-  children:          PropTypes.array.isRequired,
-  useMobileUI:       PropTypes.bool.isRequired,
-  staticReplacement: PropTypes.func.isRequired
-}
-
-export { RowHeader };
\ No newline at end of file
diff --git a/client/src/components/Splitter.js b/client/src/components/Splitter.js
index 4acbec1..3268059 100644
--- a/client/src/components/Splitter.js
+++ b/client/src/components/Splitter.js
@@ -1,17 +1,17 @@
 import React from 'react';
 
-import { CellToggle } from './CellToggle';
+import CellToggle from './CellToggle';
 import { StringInput, PriceInput, PercentInput } from './Inputs';
-import { ButtonBar } from './ButtonBar';
-import { Linker } from './Linker';
-import { RowHeader2 } from './RowHeader2';
-import { Swappable } from './Swappable';
+import ButtonBar from './ButtonBar';
+import Linker from './Linker';
+import RowHeader2 from './RowHeader2';
+import Swappable from './Swappable';
 import { TH, TD, TR, THEAD, TBODY, TABLE } from './TableDivs';
 
-import { Dish } from '../Dish';
-import { StateLoader } from '../StateLoader';
-import { Utils } from '../Utils';
-import { Cache } from '../Cache';
+import Dish from '../Dish';
+import StateLoader from '../StateLoader';
+import Utils from '../Utils';
+import Cache from '../Cache';
 
 import '../css/Splitter.css';
 
@@ -85,7 +85,10 @@ class Splitter extends React.Component {
     if (diff === 0) {
       return initialSplit;
     }
+    return initialSplit + this.calcSplitDiff(diff, ppd, pInd, dInd);
+  }
 
+  calcSplitDiff(diff, ppd, pInd, dInd) {
     // figure out where in the index of people we are, since people to the
     // left always pay more
     const indexOfThisPerson = this.state.people
@@ -93,10 +96,10 @@ class Splitter extends React.Component {
       .filter(el => el > -1)
       .indexOf(pInd);
 
-    const splitDiff = diff < 0
-      ? (ppd - indexOfThisPerson <= Math.abs(diff) * 100) ? -0.01 : 0
-      : (indexOfThisPerson < diff * 100) ? 0.01 : 0;
-    return initialSplit + splitDiff;
+    if (diff < 0) {
+      return (ppd - indexOfThisPerson <= Math.abs(diff) * 100) ? -0.01 : 0;
+    }
+    return (indexOfThisPerson < diff * 100) ? 0.01 : 0;
   }
 
   // Given a person, what's their subtotal owed? (exluding tax/tip)
@@ -124,7 +127,7 @@ class Splitter extends React.Component {
     this.setState((prevState) => {
       const newOrders = Utils.clone2D(prevState.orders);
 
-      for (let row = 0; row < newOrders.length; row++) {
+      for (let row = 0; row < newOrders.length; row += 1) {
         newOrders[row][this.state.people.length] = true;
       }
 
@@ -165,7 +168,7 @@ class Splitter extends React.Component {
 
   componentWillUpdate() {
     this._cache.clear();
-    console.log('cleared cache');
+    console.log('Cleared cache');
   }
 
   // Store the current state to localStorage, every time the state is updated
@@ -182,8 +185,8 @@ class Splitter extends React.Component {
           removePersonFunc={this.removeLastPerson.bind(this)}
           addDishFunc={this.addDish.bind(this)}
           removeDishFunc={this.removeLastDish.bind(this)}
-          showExampleFunc={() => { this.setState(prevState => StateLoader.getExample()); }}
-          resetFunc={() => { this.setState(prevState => StateLoader.getDefault()); }}
+          showExampleFunc={() => { this.setState(() => StateLoader.getExample()); }}
+          resetFunc={() => { this.setState(() => StateLoader.getDefault()); }}
         />
         <TABLE>
           {this.getHeaderRow()}
@@ -227,7 +230,7 @@ class Splitter extends React.Component {
           value={person}
           placeholder={`Pal ${pInd + 1}`}
           onChangeCB={setNameCBGetter(pInd)}
-          style={{ textAlign: 'center' }}
+          center
         />
       )));
   }
@@ -244,13 +247,14 @@ class Splitter extends React.Component {
     ];
     rowEls = rowEls.concat(this.state.people.map((person, pInd) => (
       <span style={{ fontWeight: 'bold', display: 'inline-block' }}>
-        {Utils.priceAsString(this.subtotalOwed(pInd) + this.percentOfSubtotalOwed(pInd) * taxAndTip)}
+        {Utils.priceAsString((this.percentOfSubtotalOwed(pInd) * taxAndTip)
+          + this.subtotalOwed(pInd))}
       </span>
     )));
 
     return (
       <TR>
-        {rowEls.map((el, el_i) => <TD key={el_i}>{el}</TD>)}
+        {rowEls.map((el, i) => <TD key={i}>{el}</TD>)}
       </TR>
     );
   }
@@ -264,7 +268,9 @@ class Splitter extends React.Component {
   // Get tip row.
   getTipRow(displayName, stateKey) {
     const updaterFunc = (stringRep, isFinal) => {
-      this.setState(prevState => ({ [stateKey]: prevState[stateKey].as(stringRep, isFinal) }));
+      this.setState(prevState => ({
+        [stateKey]: prevState[stateKey].as(stringRep, isFinal)
+      }));
     };
 
     const getterFunc = () => (this.state[stateKey]);
@@ -296,7 +302,7 @@ class Splitter extends React.Component {
     rowEls = rowEls.concat(this.getSpecialPriceArray(hackyGetterFunc)
       .map(price => (<span>{Utils.priceAsString(price)}</span>)));
 
-    return <TR>{rowEls.map((el, el_i) => <TD key={el_i}>{el}</TD>)}</TR>;
+    return <TR>{rowEls.map((el, i) => <TD key={i}>{el}</TD>)}</TR>;
   }
 
   // Get tax or tip row.
@@ -325,7 +331,7 @@ class Splitter extends React.Component {
     rowEls = rowEls.concat(this.getSpecialPriceArray(getterFunc)
       .map(price => (<span>{Utils.priceAsString(price)}</span>)));
 
-    return <TR>{rowEls.map((el, el_i) => <TD key={el_i}>{el}</TD>)}</TR>;
+    return <TR>{rowEls.map((el, i) => <TD key={i}>{el}</TD>)}</TR>;
   }
 
   getSpecialPriceArray(getterFunc) {
@@ -350,9 +356,9 @@ class Splitter extends React.Component {
       (setUnset) => {
         // don't unset the last enabled cell in an order (someone has to pay!)
         if (!setUnset && this.state.orders[dInd].reduce(Utils.sumFunc, 0) === 1) {
-          this.setState(prevState => ({ error: errorKey(pInd, dInd) }));
+          this.setState(() => ({ error: errorKey(pInd, dInd) }));
           setTimeout(() => {
-            this.setState(prevState => ({ error: undefined }));
+            this.setState(() => ({ error: undefined }));
           }, 200);
         }
         else {
diff --git a/client/src/components/Swappable.js b/client/src/components/Swappable.js
index d20053c..0e9bd33 100644
--- a/client/src/components/Swappable.js
+++ b/client/src/components/Swappable.js
@@ -5,29 +5,32 @@ import ClassNames from 'classnames';
 class Swappable extends React.Component {
   _ref;
 
-  onFocusCB(e) {
+  onFocusCB = () => {
     this.props.swapCB(this.props.index, true);
-  }
+  };
 
-  onBlurCB(e) {
+  onBlurCB = () => {
     this.props.swapCB(this.props.index, false);
-  }
+  };
 
-  focusChild() {
+  focusChild = () => {
     this._ref.selectInput();
-  }
- 
+  };
+
   render() {
-    let className = ClassNames({
-      'Swappable': true,
-      'interactive' : this.props.interactive,
-      'notInteractive' : !this.props.interactive});
+    const className = ClassNames({
+      Swappable: true,
+      interactive: this.props.interactive,
+      notInteractive: !this.props.interactive
+    });
     return (
-      <div className={className}
+      <div
+        className={className}
         style={this.props.style}
-        onBlur={this.onBlurCB.bind(this)}
-        onFocus={this.onFocusCB.bind(this)}>
-          {this.getInnerChild()}
+        onBlur={this.onBlurCB}
+        onFocus={this.onFocusCB}
+      >
+        {this.getInnerChild()}
       </div>
     );
   }
@@ -36,8 +39,9 @@ class Swappable extends React.Component {
   // else, clone the the appropriate child, and give it a ref prop for CB access
   getInnerChild() {
     return React.cloneElement(
-      this.props.children[this.props.interactive ? 0 : 1], 
-      { ref: ref => { this._ref = ref; }})
+      this.props.children[this.props.interactive ? 0 : 1],
+      { ref: (ref) => { this._ref = ref; } }
+    );
   }
 }
 
@@ -47,6 +51,4 @@ class Swappable extends React.Component {
 //   index:             PropTypes.number.isRequired
 // };
 
-// Swappable.name = 'Swappable'
-
-export { Swappable };
\ No newline at end of file
+export default Swappable;
diff --git a/client/src/components/TableDivs.js b/client/src/components/TableDivs.js
index 8778254..e92048e 100644
--- a/client/src/components/TableDivs.js
+++ b/client/src/components/TableDivs.js
@@ -8,9 +8,9 @@ function DivTableElement(classType, props) {
   );
 }
 
-export const TH = (props) => DivTableElement('th', props);
-export const TD = (props) => DivTableElement('td', props);
-export const TR = (props) => DivTableElement('tr', props);
-export const THEAD = (props) => DivTableElement('thead', props);
-export const TBODY = (props) => DivTableElement('tbody', props);
-export const TABLE = (props) => DivTableElement('table', props);
\ No newline at end of file
+export const TH = props => DivTableElement('th', props);
+export const TD = props => DivTableElement('td', props);
+export const TR = props => DivTableElement('tr', props);
+export const THEAD = props => DivTableElement('thead', props);
+export const TBODY = props => DivTableElement('tbody', props);
+export const TABLE = props => DivTableElement('table', props);
diff --git a/client/src/css/index.css b/client/src/css/index.css
index 9faf277..f6f3395 100644
--- a/client/src/css/index.css
+++ b/client/src/css/index.css
@@ -1,6 +1,6 @@
 body {
   margin: 0;
-  padding: 0;
+  /*padding: 0;*/
   font-family: Helvetica, Arial, sans-serif;
   width: fit-content;
 }
diff --git a/client/src/index.js b/client/src/index.js
index 6adc7a3..5270061 100644
--- a/client/src/index.js
+++ b/client/src/index.js
@@ -1,15 +1,15 @@
+// keep this css up here so it has the lowest priorty
+import 'bootstrap/dist/css/bootstrap.css';
+
 import React from 'react';
 import ReactDOM from 'react-dom';
 import { unregister } from './registerServiceWorker';
-
-// keep this css up here so it has the lowest priorty
-import 'bootstrap/dist/css/bootstrap.css';
+import App from './components/App';
 
 import './css/index.css';
-import App from './components/App.js';
 
 // disable service works for now
-//import registerServiceWorker from './registerServiceWorker';
+// import registerServiceWorker from './registerServiceWorker';
 unregister();
 
 ReactDOM.render(<App />, document.getElementById('root'));
diff --git a/client/src/registerServiceWorker.js b/client/src/registerServiceWorker.js
index a3e6c0c..b396bee 100644
--- a/client/src/registerServiceWorker.js
+++ b/client/src/registerServiceWorker.js
@@ -1,3 +1,6 @@
+/* eslint-disable */
+// This is FB's code, leave it alone
+
 // In production, we register a service worker to serve assets from local cache.
 
 // This lets the app load faster on subsequent visits in production, and gives
diff --git a/client/src/setupTests.js b/client/src/setupTests.js
index ec52607..9dca810 100644
--- a/client/src/setupTests.js
+++ b/client/src/setupTests.js
@@ -6,4 +6,4 @@ const localStorageMock = {
   setItem: jest.fn(),
   clear: jest.fn()
 };
-global.localStorage = localStorageMock
+global.localStorage = localStorageMock;
diff --git a/dbScript.js b/dbScript.js
index 0141e74..eba11e6 100644
--- a/dbScript.js
+++ b/dbScript.js
@@ -1,3 +1,6 @@
+/* eslint-disable */
+// just a one time scripts file, don't eslint
+
 const db = require('./models/database.js');
 
 
diff --git a/models/database.js b/models/database.js
index ffd3f2a..071f760 100644
--- a/models/database.js
+++ b/models/database.js
@@ -1,31 +1,25 @@
-const { Pool } = require('pg')
+const { Pool } = require('pg');
 require('dotenv').config();
 
 const pool = new Pool({
   // connectionString: 'postgres://localhost:5432/splitmycheck',
   connectionString: process.env.DATABASE_URL,
   ssl: true
-})
+});
 
 // lovingly taken from https://node-postgres.com/guides/project-structure
-
 function query(text, params, callback) {
   const start = Date.now();
 
   return pool.query(text, params, (err, dbRes) => {
-    const duration = Date.now() - start
-    console.log('executed query', { text, params, duration, rows: dbRes ? dbRes.rowCount : 'UH-OH!' });
-    callback(err, dbRes)
-  })
+    const duration = Date.now() - start;
+    console.log('executed query', {
+      text, params, duration, rows: dbRes ? dbRes.rowCount : 'UH-OH!'
+    });
+    callback(err, dbRes);
+  });
 }
 
-// function getClient(callback) {
-//   pool.connect((err, client, done) => {
-//     callback(err, client, done)
-//   })
-// }
-
 module.exports = {
-  query: query
-  // getClient: getClient
-}
\ No newline at end of file
+  query
+};
diff --git a/server.js b/server.js
index e925cf6..7c0e4d3 100644
--- a/server.js
+++ b/server.js
@@ -67,7 +67,8 @@ app.get('/saved/*', (req, res) => {
         'utf8'
       );
       const $ = cheerio.load(html);
-      $('head').prepend(`<script>window.SERVER_DATA = ${dbRes.rows[0].state};</script>`);
+      $('head')
+        .prepend(`<script>window.SERVER_DATA=${dbRes.rows[0].state};</script>`);
       res.send($.html());
     }
     else {
@@ -80,7 +81,7 @@ app.get('/saved/*', (req, res) => {
 });
 
 app.use((req, res) => {
-  res.status(404).send("Sorry, can't find what you're looking for! (404 error)");
+  res.status(404).send("404: Can't find what you're looking for.");
 });
 
 app.listen(app.get('port'), () => {
