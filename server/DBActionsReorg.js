/* eslint-disable camelcase */

const Database = require('./DatabaseConnection');

const createSplitsTable =
  `CREATE TABLE IF NOT EXISTS Splits (
    split_id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    tax FLOAT,
    tip_percent FLOAT,
    link_id VARCHAR(6),
    created TIMESTAMP WITH TIME ZONE,
    last_accessed TIMESTAMP WITH TIME ZONE
  );`;

const createDishesTable = 
  `CREATE TABLE IF NOT EXISTS Dishes (
    dish_id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(20),
    price FLOAT,
    position INT,
    split_id INT REFERENCES Splits
  );`;

const createPeopleTable = 
  `CREATE TABLE IF NOT EXISTS People (
    person_id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(20),
    position INT,
    split_id INT REFERENCES Splits 
  );`;

const createOrderTable = 
  `CREATE TABLE IF NOT EXISTS Orders (
    order_id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    dish_id INT REFERENCES Dishes,
    person_id INT REFERENCES People
  );`;


class DBActionsReorg {
  // TODO how do we make sure this query happens before any future ones?
  constructor() {
    this.db = new Database();
  }

  async _initialize() {
    await this.db.queryAsync(createSplitsTable).then(v => {
      console.log('createSplitsTable ran (1)');
    });
    await this.db.queryAsync(createDishesTable).then(v => {
      console.log('createDishesTable ran (2)');
    });
    await this.db.queryAsync(createPeopleTable).then(v => {
      console.log('createPeopleTable ran (3)');
    });
    await this.db.queryAsync(createOrderTable).then(v => {
      console.log('createOrderTable ran (4)');
      this.ready = true;
    });
    console.log(this.ready);
  }

  doStuff(printMe) {
    if (this.ready) {
      console.log(printMe);
    }
    else {
      this._initialize().then(() => {
        console.log(printMe);
      })
    }
  }

  addRow(obj, cb) {
    this.db.query(
      'INSERT INTO Links (link_code, state) VALUES ($1, $2)',
      [ obj.link_code, obj.state ],
      (err) => {
        cb(obj, err);
      }
    );
  }

  findByLinkCode(link_code, cb) {
    this.db.query(
      `SELECT * FROM Links WHERE link_code = '${link_code}'`,
      [],
      (err, dbRes) => {
        cb(dbRes, err);
      }
    );
  }
}

let db = new DBActionsReorg()
db.doStuff('oh hi');
db.doStuff('oh hi again');



// module.exports = DBActionsReorg;


